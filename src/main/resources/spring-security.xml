<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-4.0.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">
    <context:component-scan base-package="com.chtc.supervision.security" />
    <!--对指定的请求不做验证-->
    <http pattern="/login" security="none"/>
    <http pattern="/resources/**" security="none" />
    <http pattern="/mobile/login" security="none" />

    <http auto-config="true" use-expressions="true">
        <access-denied-handler error-page="/403" />
        <!--登录-->
        <form-login login-page="/login" username-parameter="username"
                    password-parameter="password"
                    default-target-url="/index"
                    authentication-failure-url="/login?error"
                    login-processing-url="/j_spring_security_check"
                    always-use-default-target="true"
        />
        <!--登出-->
        <logout invalidate-session="true"
                logout-success-url="/login?logout"
                logout-url="/j_spring_security_logout"/>
        <!--关闭csrf-->
        <csrf disabled="true"/>

        <session-management invalid-session-url="/login?invalid">
        <!-- 防止多端登录-->
        <concurrency-control max-sessions="1"
            error-if-maximum-exceeded="false" expired-url="/error" />
        </session-management >
        <!--自定义过滤器-->
        <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
    </http>
    <!--用户认证-->
    <!-- Spring Sercurity要从数据库中获取用户、权限、资源来实现权限管理，需要自定义过滤器， 并且该过滤器必须在spring
            Security执行FILTER_SECURITY_INTERCEPTOR过滤器之前执行， 因为该框架实现权限管理实质就是在执行action之前先执行它框架中的为权限管理制定的一系列Fliter。
            我们自定的这个SercurityFilter类要继承AbstractSecurityInterceptor 接口和Filter类（负责传递一系列的Filter）,
            因为我们是从数据库中获取权限验证的数据，所以还要重写FilterInvocationSecurityMetadataSource 接口， AccessDecisionManager
            接口，UserDetailsService 接口，只要重写了这3个接口， 然后再spring配置文件中做相应的配置，项目启动启动后，我们进行资源请求，就自动会去执行我们重定义的类进行权限判断。 -->
    <authentication-manager alias="myAuthenticationManager">
        <authentication-provider user-service-ref="myUserDetailService">
            <password-encoder hash="md5"/>
        </authentication-provider>
    </authentication-manager>
</beans:beans>
